using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine;
using UnityEngine.SceneManagement;

struct 角色状态
{
    public bool 站立;
    public bool 攻击;
    public bool 爬墙;
    public bool 受伤;
}
public class 角色基本属性 : MonoBehaviour
{
    [Header("碰撞脚本")]
    public 角色碰撞 地板;
    public 音频播放 音频;


    static public 角色基本属性 instance;
    int 上次攻击=0;
    public int 攻击次数=0;
    [Header("可视化"),SerializeField] 
    float X轴输入;
    float Y轴输入;
    bool 鼠标左键;
    bool 空格键;
    bool 左上按键;

    bool 跳跃;
    float 跳跃时间;
    [SerializeField]
    float 跳跃检测;
    [Header("攻击相关")]
    public float 攻击间隔小;
    public float 攻击间隔大;


    public float 攻击时间;
    public float 标准速度;
    public float 速度;
    public float 速度插值系数;
    public float 跳跃冲量;
    Rigidbody2D 刚体;
    Animator animator;
    SpriteRenderer spriteRenderer;

    角色状态 状态;
    private void Awake()
    {
        //获取组件
        instance = this;
        刚体 = GetComponent<Rigidbody2D>();
        animator = GetComponent<Animator>();
        spriteRenderer = GetComponent<SpriteRenderer>();
        状态 = new 角色状态();
        速度 = 标准速度;
    }
    void Start()
    {
        
    }

    // Update is called once per frame
   
    void 输入检测()
    {
        X轴输入 =  Input.GetAxisRaw("Horizontal");
        空格键 = Input.GetKeyDown(KeyCode.Space);
        鼠标左键 = Input.GetMouseButton(0);
        空格键 = Input.GetKey(KeyCode.Space);
        左上按键 = Input.GetKey(KeyCode.LeftShift);

    }
    void 物理判定()
    {
        刚体.velocity = new Vector3(Mathf.Lerp( 刚体.velocity.x/速度,X轴输入,速度插值系数)*速度,刚体.velocity.y,0);
        if (刚体.velocity.x > 0.1f) spriteRenderer.flipX = false; else if(刚体.velocity.x<-0.1f) spriteRenderer.flipX = true;
        if (跳跃) { 跳跃 = false;刚体.AddForce(Vector2.up * 跳跃冲量); }
    }
    void Update()
    {
        输入检测();
        if (Input.GetKeyDown(KeyCode.J))
        {
            SceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex);
        }
    }
    private void FixedUpdate()
    {
        物理判定();
        攻击判断();
        跳跃判断();
        角色状态检测();
        动画转变();
    }
    void 动画转变()
    {
        if (刚体.velocity.magnitude > 0.3&&!状态.攻击&&状态.站立)
        {
            animator.Play("行走");
        }
        else if(!状态.攻击&&状态.站立)
        {
            animator.Play("站立");
        }
        if (!状态.站立 && 攻击次数 == 0)
        {
            if (刚体.velocity.y > 0)
            {
                animator.Play("跳跃");
            }
            else
            {
                animator.Play("落下");
            }
        }
        switch (攻击次数)
        {
            case 1:if (上次攻击 == 1) break; animator.Play("攻击1"); 上次攻击 = 1;    音频.播放(0); break;
            case 2:if (上次攻击 == 2) break; animator.Play("攻击2"); 上次攻击 = 2;    音频.播放(1); break;
            case 3:if (上次攻击 == 3) break; animator.Play("攻击3"); 上次攻击 = 3;    音频.播放(2); break;
            default:break;
            
        }
    }
    void 攻击判断()
    {
        if (攻击时间 > 攻击间隔大)
        {
            攻击次数 = 0;
            攻击时间 = 0;
            上次攻击 = 0;
            return;
        }
        if(攻击次数>0)  攻击时间 += Time.deltaTime;
        if (鼠标左键 && 攻击次数 == 0)
        {
            攻击次数 = 1;
            攻击时间 = 0;
            Debug.Log("1");
        }
        else if (鼠标左键 && 攻击时间 > 攻击间隔小&&攻击次数<3)
        {
            攻击次数++;
            攻击时间 = 0;
        }
        else if (鼠标左键 && 攻击次数 == 3 && 攻击时间 > 攻击间隔小)
        {
            攻击次数 = 1;
            攻击时间 = 0;
        }
    }
    void 跳跃判断()
    {
        if (状态.站立 && 跳跃时间 > 跳跃检测&&空格键)
        {
            跳跃 = true;
            跳跃时间 = 0;
        }
        else
        {
            跳跃时间 += Time.deltaTime;
            return;
        }
    }
    void 角色状态检测()
    {
        if (攻击次数 != 0)
        {
            状态.攻击 = true;
            速度 = 标准速度 / 2;
        }
        else if (状态.站立 && 攻击次数 == 0 && 左上按键)
        {
            速度 = Mathf.Lerp(速度, 标准速度*2F, 2f * Time.deltaTime);
        }
        else
        {
            状态.攻击 = false;
            速度 = Mathf.Lerp(速度, 标准速度, 2f * Time.deltaTime);
        }
        if (地板.值)
        {
            状态.站立 = true;
        }
        else
        {
            状态.站立 = false;
        }
    }

}

